/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EmployeeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5941112479007166795L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeRecord\",\"namespace\":\"com.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dob\",\"type\":\"string\"},{\"name\":\"salary\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"fileType\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeRecord> ENCODER =
      new BinaryMessageEncoder<EmployeeRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeRecord> DECODER =
      new BinaryMessageDecoder<EmployeeRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence name;
   private java.lang.CharSequence dob;
   private java.lang.CharSequence salary;
   private int age;
   private java.lang.CharSequence fileType;
   private java.lang.CharSequence operation;
   private java.lang.CharSequence id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeRecord() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param dob The new value for dob
   * @param salary The new value for salary
   * @param age The new value for age
   * @param fileType The new value for fileType
   * @param operation The new value for operation
   * @param id The new value for id
   */
  public EmployeeRecord(java.lang.CharSequence name, java.lang.CharSequence dob, java.lang.CharSequence salary, java.lang.Integer age, java.lang.CharSequence fileType, java.lang.CharSequence operation, java.lang.CharSequence id) {
    this.name = name;
    this.dob = dob;
    this.salary = salary;
    this.age = age;
    this.fileType = fileType;
    this.operation = operation;
    this.id = id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return dob;
    case 2: return salary;
    case 3: return age;
    case 4: return fileType;
    case 5: return operation;
    case 6: return id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: dob = (java.lang.CharSequence)value$; break;
    case 2: salary = (java.lang.CharSequence)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: fileType = (java.lang.CharSequence)value$; break;
    case 5: operation = (java.lang.CharSequence)value$; break;
    case 6: id = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'dob' field.
   * @return The value of the 'dob' field.
   */
  public java.lang.CharSequence getDob() {
    return dob;
  }


  /**
   * Sets the value of the 'dob' field.
   * @param value the value to set.
   */
  public void setDob(java.lang.CharSequence value) {
    this.dob = value;
  }

  /**
   * Gets the value of the 'salary' field.
   * @return The value of the 'salary' field.
   */
  public java.lang.CharSequence getSalary() {
    return salary;
  }


  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(java.lang.CharSequence value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'fileType' field.
   * @return The value of the 'fileType' field.
   */
  public java.lang.CharSequence getFileType() {
    return fileType;
  }


  /**
   * Sets the value of the 'fileType' field.
   * @param value the value to set.
   */
  public void setFileType(java.lang.CharSequence value) {
    this.fileType = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Creates a new EmployeeRecord RecordBuilder.
   * @return A new EmployeeRecord RecordBuilder
   */
  public static com.avro.EmployeeRecord.Builder newBuilder() {
    return new com.avro.EmployeeRecord.Builder();
  }

  /**
   * Creates a new EmployeeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeRecord RecordBuilder
   */
  public static com.avro.EmployeeRecord.Builder newBuilder(com.avro.EmployeeRecord.Builder other) {
    if (other == null) {
      return new com.avro.EmployeeRecord.Builder();
    } else {
      return new com.avro.EmployeeRecord.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeRecord RecordBuilder by copying an existing EmployeeRecord instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeRecord RecordBuilder
   */
  public static com.avro.EmployeeRecord.Builder newBuilder(com.avro.EmployeeRecord other) {
    if (other == null) {
      return new com.avro.EmployeeRecord.Builder();
    } else {
      return new com.avro.EmployeeRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeRecord>
    implements org.apache.avro.data.RecordBuilder<EmployeeRecord> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence dob;
    private java.lang.CharSequence salary;
    private int age;
    private java.lang.CharSequence fileType;
    private java.lang.CharSequence operation;
    private java.lang.CharSequence id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.avro.EmployeeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dob)) {
        this.dob = data().deepCopy(fields()[1].schema(), other.dob);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.fileType)) {
        this.fileType = data().deepCopy(fields()[4].schema(), other.fileType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.operation)) {
        this.operation = data().deepCopy(fields()[5].schema(), other.operation);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.id)) {
        this.id = data().deepCopy(fields()[6].schema(), other.id);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.avro.EmployeeRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dob)) {
        this.dob = data().deepCopy(fields()[1].schema(), other.dob);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fileType)) {
        this.fileType = data().deepCopy(fields()[4].schema(), other.fileType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.operation)) {
        this.operation = data().deepCopy(fields()[5].schema(), other.operation);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.id)) {
        this.id = data().deepCopy(fields()[6].schema(), other.id);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dob' field.
      * @return The value.
      */
    public java.lang.CharSequence getDob() {
      return dob;
    }


    /**
      * Sets the value of the 'dob' field.
      * @param value The value of 'dob'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setDob(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dob = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dob' field has been set.
      * @return True if the 'dob' field has been set, false otherwise.
      */
    public boolean hasDob() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dob' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearDob() {
      dob = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public java.lang.CharSequence getSalary() {
      return salary;
    }


    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setSalary(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.salary = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearSalary() {
      salary = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileType' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileType() {
      return fileType;
    }


    /**
      * Sets the value of the 'fileType' field.
      * @param value The value of 'fileType'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setFileType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.fileType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fileType' field has been set.
      * @return True if the 'fileType' field has been set, false otherwise.
      */
    public boolean hasFileType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fileType' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearFileType() {
      fileType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.operation = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.avro.EmployeeRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeRecord build() {
      try {
        EmployeeRecord record = new EmployeeRecord();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dob = fieldSetFlags()[1] ? this.dob : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.salary = fieldSetFlags()[2] ? this.salary : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.fileType = fieldSetFlags()[4] ? this.fileType : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.operation = fieldSetFlags()[5] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.id = fieldSetFlags()[6] ? this.id : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeRecord>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.dob);

    out.writeString(this.salary);

    out.writeInt(this.age);

    out.writeString(this.fileType);

    out.writeString(this.operation);

    out.writeString(this.id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.dob = in.readString(this.dob instanceof Utf8 ? (Utf8)this.dob : null);

      this.salary = in.readString(this.salary instanceof Utf8 ? (Utf8)this.salary : null);

      this.age = in.readInt();

      this.fileType = in.readString(this.fileType instanceof Utf8 ? (Utf8)this.fileType : null);

      this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.dob = in.readString(this.dob instanceof Utf8 ? (Utf8)this.dob : null);
          break;

        case 2:
          this.salary = in.readString(this.salary instanceof Utf8 ? (Utf8)this.salary : null);
          break;

        case 3:
          this.age = in.readInt();
          break;

        case 4:
          this.fileType = in.readString(this.fileType instanceof Utf8 ? (Utf8)this.fileType : null);
          break;

        case 5:
          this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);
          break;

        case 6:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










